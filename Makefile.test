FN_MODE ?= exec

ifeq ($(FN_MODE),exec)
APPLY_SETTERS := --exec bin/linux_amd64/apply-setters
DIGESTER := --exec bin/linux_amd64/digester
HELM_RENDER := --exec bin/linux_amd64/render-helm-chart
HELM_SOURCE := --exec bin/linux_amd64/source-helm-chart
HELM_UPGRADER := --exec bin/linux_amd64/helm-upgrader
TEMPLATE_KYAML := --exec bin/linux_amd64/template-kyaml
else
APPLY_SETTERS := --image ghcr.io/krm-functions/apply-setters@sha256:a2fb43f33174647780bbf3933f7d11f44120a1b57abb52c26051a27d2548c640
DIGESTER := --network --image ghcr.io/krm-functions/digester@sha256:bddb598d77ca452a4a949035b4824f0b7bfda8c30106d2d19eb18240b7bd634d
HELM_RENDER := --network --image ghcr.io/krm-functions/render-helm-chart@sha256:a0702d40ebe6671f869248d71f5d2df6471dba6fb968d95cf4fec31a46ffd883
HELM_SOURCE := --network --image ghcr.io/krm-functions/source-helm-chart@sha256:bae1f86418fef4fc7dd081e6ff87ac6130583fd4a4579de905a8c0282c8f54f9
HELM_UPGRADER := --network --image ghcr.io/krm-functions/helm-upgrader@sha256:acb161d1f6b54ff114079e2eb55f75da0d75d00b434b72ea5968f7423ed57b2e
endif

BASELINE_RENDER_HELM_CHART := gcr.io/kpt-fn/render-helm-chart:v0.2.2

e2e-tests: test-render-helm-chart render-helm-chart-example render-helm-chart-example2 test-source-helm-chart test-helm-upgrader test-apply-setters test-digester

# BEWARE: These tests are fragile - we want to test upgrades, but without upgrade-constraints tests might fail when charts are updated
.PHONY: test-helm-upgrader
test-helm-upgrader:
	kpt fn source examples/helm-upgrader | kpt fn eval - --fn-config example-function-configs/config-upgrade-helm-version-inline.yaml --truncate-output=false $(HELM_UPGRADER) > test-out.yaml
	grep -e '.*upgrade-available: .*cert-manager:v1.8.2' test-out.yaml
	grep -e '.*upgrade-available.0: .*cert-manager:v1.12.1' test-out.yaml
	grep -e '.*upgrade-available.0: .*metacontroller-helm:v4.10.0' test-out.yaml
	grep -e '.*upgrade-available.0: .*karpenter:0.35.0' test-out.yaml
	grep -e '.*upgrade-available.1: .*/external-secrets:0.9.16' test-out.yaml
	rm test-out.yaml

.PHONY: test-render-helm-chart
test-render-helm-chart:
	# For reference, render chart using baseline function
	rm -rf rendered-output
	echo "" | kpt fn eval - --network --fn-config examples/render-helm-chart2/argo-workflows.yaml -i ${BASELINE_RENDER_HELM_CHART} | kpt fn sink rendered-output
	# Source step, fetch chart from upstream, but do not render
	rm -rf sourced-output
	kpt fn source examples/render-helm-chart2 | kpt fn eval - ${HELM_RENDER} --results-dir results2 | kpt fn sink sourced-output
	grep -e 'message: sourcing with render-helm-chart is deprecated' results2/results.yaml
	# Render from previously sourced chart
	rm -rf rendered-output2
	kpt fn source sourced-output | kpt fn eval - ${HELM_RENDER} | kpt fn sink rendered-output2
	diff -q rendered-output rendered-output2
	rm -rf rendered-output sourced-output rendered-output2 results2

# Example usage from docs/render-helm-chart.md
.PHONY: render-helm-chart-example
render-helm-chart-example:
	kpt fn source examples/render-helm-chart | kpt fn eval - ${HELM_SOURCE} | kpt fn sink my-cert-manager-package
	grep -q 'apiVersion: experimental.helm.sh/v1alpha1' my-cert-manager-package/cert-manager-chart.yaml
	cp examples/render-helm-chart/Kptfile my-cert-manager-package/
	kpt fn render my-cert-manager-package -o stdout | grep -q 'team-name: blue-team'
	rm -rf my-cert-manager-package

.PHONY: render-helm-chart-example2
render-helm-chart-example2:
	kpt fn source examples/render-helm-chart/non-stardard-tar-filename | kpt fn eval - ${HELM_RENDER} | kpt fn sink my-non-stardard-tar-filename
	rm -rf my-non-stardard-tar-filename

.PHONY: test-source-helm-chart
test-source-helm-chart:
	kpt fn source examples/render-helm-chart3 | kpt fn eval - --truncate-output=false $(HELM_SOURCE) > test-out.yaml
	grep -e 'experimental.helm.sh/chart-sum/karpenter' test-out.yaml
	grep -e 'experimental.helm.sh/chart-sum/cert-manager' test-out.yaml
	rm test-out.yaml

.PHONY: test-apply-setters
test-apply-setters: test-apply-setters1 test-apply-setters2

.PHONY: test-apply-setters1
test-apply-setters1:
	kpt fn source examples/apply-setters | kpt fn eval - --truncate-output=false $(APPLY_SETTERS) --fn-config example-function-configs/apply-setters/cm-setters.yaml | kpt fn eval - -i gcr.io/kpt-fn/remove-local-config-resources:v0.1.0 -o unwrap > test-out.yaml
	grep -e 'foo: "valueFoo"' test-out.yaml
	grep -e 'bar: "valueBar"' test-out.yaml
	grep -e 'baz: "valueBaz"' test-out.yaml
	grep -e 'replicas: "4"' test-out.yaml
	grep -e 'combined: ""' test-out.yaml
	grep -e 'app.kubernetes.io/version: "a1b2c3d4e5e6"' test-out.yaml
	rm test-out.yaml

.PHONY: test-apply-setters2
test-apply-setters2:
	kpt fn source examples/apply-setters | kpt fn eval - --truncate-output=false $(APPLY_SETTERS) --fn-config example-function-configs/apply-setters/apply-setters-fn-config.yaml | kpt fn eval - -i gcr.io/kpt-fn/remove-local-config-resources:v0.1.0 -o unwrap > test-out.yaml
	grep -e 'foo: ""' test-out.yaml
	grep -e 'bar: "valueBar2"' test-out.yaml
	grep -e 'baz: "valueBaz2"' test-out.yaml
	grep -e 'replicas: "4"' test-out.yaml
	grep -e 'combined: "4-a1b2c3d4e5e6"' test-out.yaml
	grep -e 'app.kubernetes.io/version: "a1b2c3d4e5e6"' test-out.yaml
	rm test-out.yaml

.PHONY: test-digester
test-digester: test-digester-step1 test-digester-step3

.PHONY: test-digester-step1
test-digester-step1:
	rm -rf digester-tmp0
	kpt fn source examples/digester | kpt fn eval - --truncate-output=false $(HELM_SOURCE) | kpt fn sink digester-tmp0

.PHONY: test-digester-step2
test-digester-step2:
	kpt fn source digester-tmp0 | kpt fn eval - --truncate-output=false $(DIGESTER) > test-out.yaml
	head -n 60 test-out.yaml

.PHONY: test-digester-step3
test-digester-step3:
	rm -rf digester-tmp1
	kpt fn source digester-tmp0 | kpt fn eval - --truncate-output=false $(DIGESTER) | kpt fn sink digester-tmp1
	kpt fn render digester-tmp1 -o unwrap > test-out.yaml
	grep 'image:' test-out.yaml


SOURCE_HELM_CHART_IMAGE ?= ghcr.io/krm-functions/source-helm-chart@sha256:bae1f86418fef4fc7dd081e6ff87ac6130583fd4a4579de905a8c0282c8f54f9
DIGESTER_IMAGE ?= ghcr.io/krm-functions/digester@sha256:bddb598d77ca452a4a949035b4824f0b7bfda8c30106d2d19eb18240b7bd634d

.PHONY: test-digester-w-containers
test-digester-w-containers:
	echo "** sourcing step"
	rm -rf cert-manager-package
	kpt fn source examples/digester \
	  | kpt fn eval - --network -i $(SOURCE_HELM_CHART_IMAGE) \
	  | kpt fn eval - --network --truncate-output=false -i $(DIGESTER_IMAGE) \
	  | kpt fn sink cert-manager-package
	echo "** rendering using pipeline in Ktfile"

.PHONY: test-digester-w-containers2
test-digester-w-containers2:
	rm -rf cert-manager-rendered
	kpt fn render cert-manager-package -o stdout | kpt fn sink cert-manager-rendered

.PHONY: test-template-kyaml
test-template-kyaml:
	kpt fn source examples/template | kpt fn eval - --truncate-output=false $(TEMPLATE_KYAML) -- someConfig=aTestConfigString > test-out.yaml
	kpt fn source examples/template | kpt fn eval - --truncate-output=false $(TEMPLATE_KYAML) > test-out.yaml
