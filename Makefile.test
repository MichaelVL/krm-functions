HELM_UPGRADER_BIN := bin/linux_amd64/krm-helm-upgrader
HELM_RENDER_BIN := bin/linux_amd64/krm-render-helm-chart
BASELINE_RENDER_HELM_CHART := gcr.io/kpt-fn/render-helm-chart:v0.2.2
APPLY_SETTERS_BIN := bin/linux_amd64/krm-apply-setters

e2e-tests: test-render-helm-chart render-helm-chart-example test-helm-upgrader test-apply-setters

.PHONY: test-helm-upgrader
test-helm-upgrader:
	kpt fn source examples/helm-upgrader --fn-config example-function-configs/config-upgrade-helm-version-inline.yaml | $(HELM_UPGRADER_BIN) > test-out.yaml
	grep -e '.*upgrade-available: .*cert-manager:v1.8.2' test-out.yaml
	grep -e '.*upgrade-available.0: .*cert-manager:v1.12.1' test-out.yaml
	grep -e '.*upgrade-available.0: .*metacontroller-helm:v4.10.0' test-out.yaml
	grep -e '.*upgrade-available.0: .*karpenter:v0.32.1' test-out.yaml
	#grep -e '.*upgrade-available.1: .*/external-secrets:0.8.1' test-out.yaml
	rm test-out.yaml

.PHONY: test-render-helm-chart
test-render-helm-chart:
	# For reference, render chart using baseline function
	rm -rf rendered-output
	echo "" | kpt fn eval - --network --fn-config examples/render-helm-chart2/argo-workflows.yaml -i ${BASELINE_RENDER_HELM_CHART} | kpt fn sink rendered-output
	# Source step, fetch chart from upstream, but do not render
	rm -rf rendered-output2
	kpt fn source examples/render-helm-chart2 | kpt fn eval - --exec ${HELM_RENDER_BIN} | kpt fn sink rendered-output2
	# Render from previously sourced chart
	rm -rf rendered-output3
	kpt fn source rendered-output2 | kpt fn eval - --exec ${HELM_RENDER_BIN} | kpt fn sink rendered-output3
	diff -q rendered-output rendered-output3
	rm -rf rendered-output rendered-output2 rendered-output3

# Example usage from docs/render-helm-chart.md
.PHONY: render-helm-chart-example
render-helm-chart-example:
	kpt fn source examples/render-helm-chart | kpt fn eval - --exec ${HELM_RENDER_BIN} | kpt fn sink my-cert-manager-package
	grep -q 'apiVersion: experimental.helm.sh/v1alpha1' my-cert-manager-package/cert-manager-chart.yaml
	cp examples/render-helm-chart/Kptfile my-cert-manager-package/
	kpt fn render my-cert-manager-package -o stdout | grep -q 'team_name: blue-team'
	rm -rf my-cert-manager-package

.PHONY: test-apply-setters
test-apply-setters:
	kpt fn source examples/apply-setters | kpt fn eval - --truncate-output=false --exec $(APPLY_SETTERS_BIN) --fn-config example-function-configs/apply-setters/cm-setters.yaml | kpt fn eval - -i gcr.io/kpt-fn/remove-local-config-resources:v0.1.0 -o unwrap > test-out.yaml
	grep -e 'foo: "valueFoo"' test-out.yaml
	grep -e 'bar: "valueBar"' test-out.yaml
	grep -e 'baz: "valueBaz"' test-out.yaml
	grep -e 'replicas: "4"' test-out.yaml
	grep -e 'app.kubernetes.io/version: "a1b2c3d4e5e6"' test-out.yaml
	rm test-out.yaml
