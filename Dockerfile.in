FROM {ARG_BUILDER_IMAGE} AS build

ARG HELM_VERSION=v3.12.1
RUN apk update && apk add curl && curl -fsSL -o /helm-${HELM_VERSION}-{ARG_OS}-{ARG_ARCH}.tar.gz https://get.helm.sh/helm-${HELM_VERSION}-{ARG_OS}-{ARG_ARCH}.tar.gz && \
     tar -zxvf /helm-${HELM_VERSION}-{ARG_OS}-{ARG_ARCH}.tar.gz && \
     mv ./{ARG_OS}-{ARG_ARCH}/helm /usr/local/bin/helm


# Copyright 2016 The Kubernetes Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

FROM {ARG_FROM}

# When building, we can pass a unique value (e.g. `date +%s`) for this arg,
# which will force a rebuild from here (by invalidating docker's cache).
ARG FORCE_REBUILD=0

# When building, we can pass a hash of the licenses tree, which docker checks
# against its cache and can force a rebuild from here.
ARG HASH_LICENSES=0

# Add third-party licenses.
COPY .licenses/ /LICENSES/


# Helm tools add-on
COPY --from=build /usr/local/bin/helm /usr/local/bin/helm
ENV PATH /usr/local/bin:$PATH
ENV HELM_PATH_CACHE /var/cache
ENV HELM_CONFIG_HOME /tmp/helm/config
ENV HELM_CACHE_HOME /tmp/helm/cache


# When building, we can pass a hash of the binary, which docker checks against
# its cache and can force a rebuild from here.
ARG HASH_BINARY=0

# Add the platform-specific binary.
RUN apk add skopeo
COPY bin/{ARG_OS}_{ARG_ARCH}/{ARG_BIN} /{ARG_BIN}

# This would be nicer as `nobody:nobody` but distroless has no such entries.
USER 65535:65535
ENV HOME /

ENTRYPOINT ["/{ARG_BIN}"]
